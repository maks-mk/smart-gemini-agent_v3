"""
–£—Ç–∏–ª–∏—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Rich –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import os
from pathlib import Path
from typing import Dict, Any, List, Optional

from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.columns import Columns
from rich.tree import Tree
from rich.text import Text
from rich.markdown import Markdown
from rich.syntax import Syntax
from rich import box
from rich.rule import Rule
from rich.align import Align


class DisplayUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""

    def __init__(self, console: Console):
        self.console = console

    def print_header(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header_text = Text("üß† Smart Gemini FileSystem Agent", style="bold white")
        subtitle_text = Text(
            "Intelligent file operations", style="dim white"
        )

        header_panel = Panel(
            Align.center(f"{header_text}\n{subtitle_text}"),
            style="bold blue",
            box=box.DOUBLE,
        )

        self.console.print(header_panel)
        self.console.print()

    def print_status_bar(self, agent=None):
        """–°—Ç–∞—Ç—É—Å-–±–∞—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ"""
        if not agent:
            status_text = "üîß Agent not initialized"
        else:
            status = agent.get_status()
            tools_count = status.get("total_tools", 0)
            memory_status = (
                "üß† Memory" if status.get("use_memory", False) else "üö´ No Memory"
            )

            status_text = (
                f"[#40E0D0]üîß Smart Gemini Agent[/#40E0D0] "  # –Ø—Ä–∫–∞—è –±–∏—Ä—é–∑–∞
                f"üìÅ [#FF69B4]{os.path.basename(status.get('working_directory', '/'))}[/#FF69B4] "  # –Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–π
                f"[#7CFC00]{memory_status}[/#7CFC00] "  # –õ–∞–π–º-–∑–µ–ª—ë–Ω—ã–π
                f"üîß [#FFD700]{tools_count} tools[/#FFD700] "  # –ó–æ–ª–æ—Ç–æ–π
                f"üí¨ [bold #F8F8FF]Thread: main[/bold #F8F8FF]"
            )  # –ü–æ—á—Ç–∏ –±–µ–ª—ã–π

        status_panel = Panel(
            status_text, title="System Status", style="dim blue", box=box.ROUNDED
        )

        self.console.print(status_panel)

    def display_tool_call(self, tool_name: str, tool_args: dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        import json
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        header = Text()
        header.append("üîß ", style="bold yellow")
        header.append(tool_name, style="bold cyan")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if not tool_args:
            content = Text("(no arguments)", style="dim italic")
        elif len(tool_args) == 1 and len(str(tool_args)) < 60:
            # –ï—Å–ª–∏ –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –≤—ã–≤–æ–¥–∏–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            key, value = list(tool_args.items())[0]
            content = Text()
            content.append(f"{key}: ", style="bold white")
            content.append(self._format_arg_value(value))
        else:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            args_table = Table(
                show_header=False,
                box=None,
                padding=(0, 1),
                collapse_padding=True,
                show_edge=False
            )
            args_table.add_column("Key", style="bold white", no_wrap=True, width=15)
            args_table.add_column("Value", overflow="fold")
            
            for key, value in tool_args.items():
                formatted_value = self._format_arg_value(value)
                args_table.add_row(f"üìå {key}:", formatted_value)
            
            content = args_table
        
        self.console.print(
            Panel(
                content,
                title=header,
                title_align="left",
                border_style="bold yellow",
                box=box.ROUNDED,
                expand=False,
                padding=(0, 1)
            )
        )
    
    def _format_arg_value(self, value: Any) -> Text:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        import json
        
        if value is None:
            result = Text("null", style="dim italic")
        elif isinstance(value, bool):
            result = Text(str(value), style=f"bold {'green' if value else 'red'}")
        elif isinstance(value, (int, float)):
            result = Text(str(value), style="cyan")
        elif isinstance(value, str):
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è, –æ–±—Ä–µ–∑–∞–µ–º
            if len(value) > 100:
                result = Text(f"'{value[:97]}...'", style="green")
            else:
                result = Text(f"'{value}'", style="green")
        elif isinstance(value, (list, dict)):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
            try:
                formatted = json.dumps(value, ensure_ascii=False, indent=2)
                if len(formatted) > 150:
                    # –ï—Å–ª–∏ JSON —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                    compact = json.dumps(value, ensure_ascii=False)
                    if len(compact) > 100:
                        result = Text(compact[:97] + "...", style="dim")
                    else:
                        result = Text(compact, style="dim")
                else:
                    result = Text(formatted, style="dim")
            except:
                result = Text(str(value), style="dim")
        else:
            result = Text(str(value), style="white")
        
        return result

    def display_tool_result(self, tool_name: str, content: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            if isinstance(content, bytes):
                content = content.decode("utf-8", errors="ignore")
            else:
                content = str(content)
        except Exception:
            content = str(content)

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è list_directory JSON-–æ—Ç–≤–µ—Ç–æ–≤
        pretty_list_panel = None
        if tool_name.lower() in ("list_directory", "ls", "dir"):
            import json
            try:
                data = json.loads(content)
                items = []
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
                if isinstance(data, dict):
                    candidates = []
                    for key in ("entries", "items", "files", "list", "result"):
                        if key in data and isinstance(data[key], list):
                            candidates = data[key]
                            break
                    if not candidates and isinstance(data.get("data"), list):
                        candidates = data["data"]
                    for it in candidates:
                        name = it.get("name") or it.get("path") or it.get("file")
                        is_dir = bool(it.get("is_dir") or it.get("directory") or it.get("isDirectory"))
                        if name:
                            emoji = "üìÅ" if is_dir else "üìÑ"
                            items.append(f"{emoji} {name}")
                elif isinstance(data, list):
                    for it in data:
                        if isinstance(it, dict):
                            name = it.get("name") or it.get("path") or it.get("file")
                            is_dir = bool(it.get("is_dir") or it.get("directory") or it.get("isDirectory"))
                            if name:
                                emoji = "üìÅ" if is_dir else "üìÑ"
                                items.append(f"{emoji} {name}")
                        else:
                            items.append(f"üìÑ {str(it)}")
                if items:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Text –≤–º–µ—Å—Ç–æ Markdown —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
                    content_text = Text("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n", style="bold")
                    for item in items:
                        content_text.append(item + "\n")
                    
                    pretty_list_panel = Panel(
                        content_text,
                        title=f"[green]‚úÖ Tool '{tool_name}' Result[/green]",
                        border_style="green",
                        expand=False,
                    )
            except Exception:
                pass

        if pretty_list_panel is not None:
            self.console.print(pretty_list_panel)
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–¥-–±–ª–æ–∫ ```lang\n...```, –æ—Ç—Ä–∏—Å—É–µ–º —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
        if content.startswith("```") and content.endswith("```"):
            lines = content.strip("`").split("\n")
            language = lines[0] if lines and lines[0] else "text"
            code = "\n".join(lines[1:])
            syntax = Syntax(
                code, language, theme="monokai", line_numbers=False, word_wrap=True
            )
            body = syntax
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ Markdown, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            try:
                body = Markdown(content)
            except Exception:
                body = Text(content)

        self.console.print(
            Panel(
                body,
                title=f"[green]‚úÖ Tool '{tool_name}' Result[/green]",
                border_style="green",
                expand=False,
            )
        )

    def display_agent_thought(self, thought: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º—ã—Å–ª–µ–π –∞–≥–µ–Ω—Ç–∞"""
        self.console.print(
            Panel(
                f"[dim italic]{thought}[/dim italic]",
                title="[bold dim]ü§î Thinking...[/bold dim]",
                border_style="dim",
                expand=False,
            )
        )

    def display_file_tree(
        self, start_path: str, max_depth: int = 3, show_hidden: bool = False
    ):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤"""
        path = Path(start_path)
        if not path.exists():
            self.display_error(f"Path does not exist: {start_path}")
            return

        def add_tree_items(tree_node, current_path, current_depth: int = 0):
            if current_depth >= max_depth:
                return

            try:
                items = []
                path_obj = Path(current_path)

                for item in path_obj.iterdir():
                    if not show_hidden and item.name.startswith("."):
                        continue
                    items.append(item)

                items.sort(key=lambda x: (not x.is_dir(), x.name.lower()))

                for item in items:
                    if item.is_dir():
                        branch = tree_node.add(f"üìÅ {item.name}/", style="bold blue")
                        add_tree_items(branch, item, current_depth + 1)
                    else:
                        try:
                            size = item.stat().st_size
                            size_str = self._format_file_size(size)
                            tree_node.add(
                                f"{self._get_file_emoji(item.name)} {item.name} [dim]({size_str})[/dim]",
                                style=self._get_file_color(item.name),
                            )
                        except (OSError, PermissionError):
                            tree_node.add(
                                f"{self._get_file_emoji(item.name)} {item.name} [dim](access denied)[/dim]",
                                style="red",
                            )

            except PermissionError:
                tree_node.add("‚ùå Access denied", style="red")

        tree = Tree(f"üìÇ {Path(path).name or path}", style="bold green")
        add_tree_items(tree, path, 0)

        panel = Panel(
            tree, title=f"[bold]File Tree: {path}[/bold]", border_style="green"
        )
        self.console.print(panel)

    def _format_file_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        if size_bytes == 0:
            return "0 B"

        size_names = ["B", "KB", "MB", "GB", "TB"]
        i = 0
        size = float(size_bytes)

        while size >= 1024.0 and i < len(size_names) - 1:
            size /= 1024.0
            i += 1

        return f"{size:.1f} {size_names[i]}"

    def _get_file_emoji(self, filename: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        extension = filename.lower().split(".")[-1] if "." in filename else ""

        emoji_map = {
            "py": "üêç",
            "js": "üìú",
            "ts": "üìò",
            "json": "üìã",
            "md": "üìù",
            "txt": "üìÑ",
            "pdf": "üìï",
            "doc": "üìò",
            "docx": "üìò",
            "xls": "üìä",
            "xlsx": "üìä",
            "csv": "üìä",
            "jpg": "üñºÔ∏è",
            "jpeg": "üñºÔ∏è",
            "png": "üñºÔ∏è",
            "gif": "üñºÔ∏è",
            "svg": "üñºÔ∏è",
            "mp4": "üé¨",
            "avi": "üé¨",
            "mov": "üé¨",
            "mp3": "üéµ",
            "wav": "üéµ",
            "flac": "üéµ",
            "zip": "üì¶",
            "rar": "üì¶",
            "7z": "üì¶",
            "tar": "üì¶",
            "exe": "‚öôÔ∏è",
            "msi": "‚öôÔ∏è",
            "deb": "‚öôÔ∏è",
            "rpm": "‚öôÔ∏è",
            "html": "üåê",
            "css": "üé®",
            "xml": "üì∞",
            "sql": "üóÉÔ∏è",
            "db": "üóÉÔ∏è",
            "sqlite": "üóÉÔ∏è",
            "log": "üìú",
            "cfg": "‚öôÔ∏è",
            "conf": "‚öôÔ∏è",
            "ini": "‚öôÔ∏è",
        }

        return emoji_map.get(extension, "üìÑ")

    def _get_file_color(self, filename: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        extension = filename.lower().split(".")[-1] if "." in filename else ""

        color_map = {
            "py": "green",
            "js": "yellow",
            "ts": "blue",
            "json": "cyan",
            "md": "magenta",
            "txt": "white",
            "jpg": "bright_magenta",
            "jpeg": "bright_magenta",
            "png": "bright_magenta",
            "mp4": "red",
            "mp3": "bright_green",
            "zip": "bright_yellow",
            "exe": "bright_red",
            "html": "bright_blue",
            "css": "bright_cyan",
            "log": "dim white",
        }

        return color_map.get(extension, "white")

    def display_help(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        commands = {
            "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã": {
                "/help": "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
                "/status": "–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
                "/history [N]": "–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N)",
                "/clear": "–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
                "/tree [path]": "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É",
                "/tools": "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                "/reload": "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞",
                "/memory": "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –ø–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞",
                "/insights": "–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
                "/export_context [json|markdown]": "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–∞",
                "/export": "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª",
                "/quit": "–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            },
            "–§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏": {
                "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt": "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª",
                "–ø—Ä–æ—á–∏—Ç–∞–π config.py": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞",
                "—É–¥–∞–ª–∏ old.log": "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª (–±–µ–∑–æ–ø–∞—Å–Ω–æ)",
                "–ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã": "–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
                "–Ω–∞–π–¥–∏ *.py": "–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –º–∞—Å–∫–µ",
            },
            "–í–µ–±-–æ–ø–µ—Ä–∞—Ü–∏–∏": {
                "–Ω–∞–π–¥–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ Python": "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                "—Å–∫–∞—á–∞–π https://...": "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ URL",
            },
        }

        help_panels = []
        for category, cmds in commands.items():
            table = Table(show_header=False, box=None, padding=(0, 1))
            table.add_column("Command", style="cyan", no_wrap=True)
            table.add_column("Description", style="white")

            for cmd, desc in cmds.items():
                table.add_row(cmd, desc)

            panel = Panel(table, title=f"[bold]{category}[/bold]", border_style="blue")
            help_panels.append(panel)

        self.console.print(Columns(help_panels, equal=True, expand=True))

    def display_history(self, history: List, limit: int = 10):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥"""
        if not history:
            self.console.print("[yellow]–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞[/yellow]")
            return

        table = Table(title="–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥", box=box.ROUNDED)
        table.add_column("#", style="dim", width=4)
        table.add_column("–í—Ä–µ–º—è", style="cyan", width=20)
        table.add_column("–¢–∏–ø", style="magenta", width=10)
        table.add_column("–ö–æ–º–∞–Ω–¥–∞/–û—Ç–≤–µ—Ç", style="white")

        recent_history = history[-limit:] if len(history) > limit else history

        for i, entry in enumerate(recent_history, 1):
            timestamp = entry.get("timestamp", "N/A")
            entry_type = entry.get("type", "unknown")
            content = entry.get("content", "")

            if len(content) > 80:
                content = content[:77] + "..."

            type_style = {"user": "green", "agent": "blue", "error": "red"}.get(
                entry_type, "white"
            )

            table.add_row(
                str(i), timestamp, f"[{type_style}]{entry_type}[/{type_style}]", content
            )

        self.console.print(table)

    def display_agent_response(
        self, response: str, response_time: Optional[float] = None
    ):
        """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å —ç–º–æ–¥–∑–∏
        has_file_list = ("üìÅ" in response or "üìÑ" in response) and (
            "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ" in response or "–¥–∏—Ä–µ–∫—Ç–æ—Ä" in response.lower()
        )
        
        if has_file_list or response.startswith("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Text –≤–º–µ—Å—Ç–æ Markdown –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ —Ñ–∞–π–ª–æ–≤
            content = Text(response)
            panel = Panel(
                content,
                title="[bold green]ü§ñ Gemini Response[/bold green]",
                border_style="green",
            )
        elif response.startswith("```") and response.endswith("```"):
            lines = response.strip("`").split("\n")
            language = lines[0] if lines[0] else "text"
            code = "\n".join(lines[1:])

            syntax = Syntax(
                code, language, theme="monokai", line_numbers=True, word_wrap=True
            )
            panel = Panel(
                syntax,
                title="[bold green]ü§ñ Gemini Response (Code)[/bold green]",
                border_style="green",
            )
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –æ–±—ë—Ä—Ç–∫—É {'type':'text','text':'...'} –∏–ª–∏ JSON {"type":"text","text":"..."}
            resp = response
            try:
                txt = resp.strip()
                if txt.startswith("{") and "text" in txt:
                    try:
                        import json as _json

                        data = _json.loads(txt)
                    except Exception:
                        import ast as _ast

                        data = _ast.literal_eval(txt)
                    if isinstance(data, dict) and isinstance(data.get("text"), str):
                        resp = (
                            data["text"]
                            .replace("\\n", "\n")
                            .replace('\\"', '"')
                            .replace("\\'", "'")
                        )
            except Exception:
                pass
            try:
                content = Markdown(resp)
            except Exception:
                content = Text(resp)
            panel = Panel(
                content,
                title="[bold green]ü§ñ Gemini Response[/bold green]",
                border_style="green",
            )

        self.console.print(panel)

        if response_time:
            self.console.print(f"[dim]‚è±Ô∏è Response time: {response_time:.2f}s[/dim]")

    def display_error(self, error_message: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        panel = Panel(
            f"‚ùå {error_message}",
            title="[bold red]Error[/bold red]",
            border_style="red",
        )
        self.console.print(panel)

    def display_success(self, message: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        panel = Panel(
            f"‚úÖ {message}",
            title="[bold green]Success[/bold green]",
            border_style="green",
        )
        self.console.print(panel)

    def display_status_info(self, status: Dict[str, Any]):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        main_table = Table(title="[bold]ü§ñ Smart Agent Status[/bold]", box=box.ROUNDED)
        main_table.add_column("Property", style="cyan")
        main_table.add_column("Value", style="green")

        simple_status = {
            k: v
            for k, v in status.items()
            if not isinstance(v, (dict, list)) or k == "intelligence_features"
        }

        for key, value in simple_status.items():
            if key == "intelligence_features":
                value = ", ".join(value)
            table_key = key.replace("_", " ").title()
            main_table.add_row(table_key, str(value))

        self.console.print(main_table)

        if "tools_by_category" in status and status["tools_by_category"]:
            tools_table = Table(
                title="[bold]üîß Tools by Category[/bold]", box=box.SIMPLE
            )
            tools_table.add_column("Category", style="magenta")
            tools_table.add_column("Count", style="yellow", justify="right")

            category_icons = {
                "read_file": "üìñ",
                "write_file": "‚úèÔ∏è",
                "list_directory": "üìÅ",
                "create_directory": "üìÇ",
                "delete_file": "üóëÔ∏è",
                "move_file": "üì¶",
                "search": "üîç",
                "web_search": "üåê",
                "fetch_url": "‚¨áÔ∏è",
                "other": "üîß",
            }

            for category, count in status["tools_by_category"].items():
                icon = category_icons.get(category, "‚Ä¢")
                category_name = category.replace("_", " ").title()
                tools_table.add_row(f"{icon} {category_name}", str(count))

            self.console.print(tools_table)

        if status.get("context_memory_items", 0) > 0:
            memory_panel = Panel(
                f"üß† Context Memory: {status['context_memory_items']} items\n"
                f"üéØ Last Action: {status.get('last_action', status.get('last_intent', 'None'))}",
                title="[bold]Memory Status[/bold]",
                border_style="blue",
            )
            self.console.print(memory_panel)

    def clear_screen(self):
        """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
        self.console.clear()

    def print_rule(self, title: Optional[str] = None):
        """–ü–µ—á–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏"""
        self.console.print(Rule(title, style="dim"))

    def display_context_insights(self, insights: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.console.print()
        self.console.print(
            "[bold blue]üìä Performance Analytics & Context Insights[/bold blue]"
        )
        self.console.print()

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if insights.get("total_operations", 0) > 0:
            overview_table = Table(title="[bold]üìà Overview[/bold]", box=box.ROUNDED)
            overview_table.add_column("Metric", style="cyan")
            overview_table.add_column("Value", style="white")

            total_ops = insights["total_operations"]
            success_rate = insights.get("overall_success_rate", 0)
            avg_time = insights.get("avg_execution_time", 0)

            overview_table.add_row("Total Operations", str(total_ops))
            overview_table.add_row("Success Rate", f"{success_rate:.1f}%")
            overview_table.add_row("Avg Execution Time", f"{avg_time:.2f}s")

            self.console.print(overview_table)
            self.console.print()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º
            intent_stats = insights.get("intent_statistics", {})
            if intent_stats:
                intent_table = Table(
                    title="[bold]üéØ Operation Performance[/bold]", box=box.ROUNDED
                )
                intent_table.add_column("Intent", style="cyan")
                intent_table.add_column("Total", style="white")
                intent_table.add_column("Success Rate", style="green")
                intent_table.add_column("Avg Time", style="yellow")

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                sorted_intents = sorted(
                    intent_stats.items(), key=lambda x: x[1]["total"], reverse=True
                )

                for intent, stats in sorted_intents[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
                    success_rate = stats.get("success_rate", 0)
                    avg_time = stats.get("avg_time", 0)
                    total = stats.get("total", 0)

                    # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                    if success_rate >= 90:
                        success_style = "bold green"
                    elif success_rate >= 70:
                        success_style = "yellow"
                    else:
                        success_style = "bold red"

                    intent_table.add_row(
                        intent.replace("_", " ").title(),
                        str(total),
                        f"[{success_style}]{success_rate:.1f}%[/{success_style}]",
                        f"{avg_time:.2f}s",
                    )

                self.console.print(intent_table)
                self.console.print()

            # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
            problematic = insights.get("problematic_intents", [])
            if problematic:
                problem_panel = Panel(
                    "\n".join(
                        [
                            f"‚ö†Ô∏è {intent.replace('_', ' ').title()}"
                            for intent in problematic
                        ]
                    ),
                    title="[bold red]‚ö†Ô∏è Problematic Operations[/bold red]",
                    border_style="red",
                )
                self.console.print(problem_panel)
                self.console.print()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            tool_stats = insights.get("most_used_tools", {})
            if tool_stats:
                tools_table = Table(
                    title="[bold]üîß Most Used Tools[/bold]", box=box.ROUNDED
                )
                tools_table.add_column("Tool", style="cyan")
                tools_table.add_column("Usage Count", style="white")

                sorted_tools = sorted(
                    tool_stats.items(), key=lambda x: x[1], reverse=True
                )
                for tool, count in sorted_tools[:8]:  # –¢–æ–ø-8 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                    tools_table.add_row(tool, str(count))

                self.console.print(tools_table)
                self.console.print()

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = []

            if success_rate < 80:
                recommendations.append(
                    "üîç Consider reviewing error patterns and improving input validation"
                )

            if avg_time > 2.0:
                recommendations.append(
                    "‚ö° Performance could be improved - consider caching frequently used operations"
                )

            if len(problematic) > 2:
                recommendations.append(
                    "üõ†Ô∏è Multiple operations showing issues - review tool configurations"
                )

            if total_ops > 50 and not tool_stats:
                recommendations.append(
                    "üìä Enable tool usage tracking for better insights"
                )

            if recommendations:
                rec_panel = Panel(
                    "\n".join(recommendations),
                    title="[bold yellow]üí° Recommendations[/bold yellow]",
                    border_style="yellow",
                )
                self.console.print(rec_panel)

        else:
            no_data_panel = Panel(
                "No operations recorded yet. Start using the agent to see analytics!",
                title="[bold]üìä Analytics[/bold]",
                border_style="dim",
            )
            self.console.print(no_data_panel)
