"""
–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è Smart Gemini Agent
"""

import re
import ast
import logging
from typing import Optional, Any, List
from ..utils.file_formatters import FileFormatter

logger = logging.getLogger(__name__)


class ResponseFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞"""

    def __init__(self, debug_mode: bool = False):
        self.debug_mode = debug_mode
        self.file_formatter = FileFormatter()
        # –ü—Ä–µ–¥–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self._json_codeblock_re = re.compile(
            r"```json\n(\{[\s\S]*?\})\n```", re.IGNORECASE
        )
        self._dir_item_re = re.compile(r"(\[(FILE|DIR)\])\s*([^\s\[\]]+)")
        self._patterns: List[re.Pattern] = [
            re.compile(r"\[–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ([^']+):', '([^']+)'\]", re.DOTALL),
            re.compile(r"\[–§–∞–π–ª ([^']+) —Å–æ–¥–µ—Ä–∂–∏—Ç[^']*:', '([^']+)'\]", re.DOTALL),
            re.compile(r"\[([^']*—Ñ–∞–π–ª[^']*)', '([^']+)'\]", re.DOTALL | re.IGNORECASE),
            re.compile(r"\[([^,]+), '([^']+)'\]", re.DOTALL),
            re.compile(r'\["([^"]*—Ñ–∞–π–ª[^"]*)", "([^"]+)"\]', re.DOTALL | re.IGNORECASE),
            re.compile(
                r"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ([^:]+):\s*(.+?)(?=\n\n|\Z)",
                re.DOTALL | re.IGNORECASE,
            ),
        ]

    def improve_file_content_formatting(self, response: str) -> str:
        """
        –£–ª—É—á—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ

        Args:
            response: –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        if self.debug_mode:
            logger.debug(f"–ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {response[:200]}...")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ–±—ë—Ä–Ω—É—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {'type': 'text', 'text': '...'} ‚Äî –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç
        unwrapped = self._extract_wrapped_text(response)
        if unwrapped is not None:
            response = unwrapped

        # –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ JSON
        formatted_json = self._handle_json_response(response)
        if formatted_json:
            return formatted_json

        # –ù–æ–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏" in response or re.search(
            r"\[(FILE|DIR)\]", response
        ):
            formatted = self._format_list_directory_response(response)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω None, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–ª—å—à–µ
            if formatted is not None:
                return formatted

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤-–º–∞—Å—Å–∏–≤–æ–≤
        if response.startswith("[") and response.endswith("]"):
            formatted = self._handle_array_response(response)
            if formatted:
                return formatted

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        if self._is_already_formatted(response):
            if self.debug_mode:
                logger.debug("–û—Ç–≤–µ—Ç —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω")
            return response

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        formatted = self._handle_pattern_matching(response)
        if formatted:
            return formatted

        if self.debug_mode:
            logger.debug("–ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç")
        return response

    def _handle_json_response(self, response: str) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""
        try:
            # –ò—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ
            match = self._json_codeblock_re.search(response)
            if not match:
                return None

            raw = match.group(1)
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ JSON
            import json

            try:
                json_data = json.loads(raw)
            except Exception:
                # –§–æ–ª–±–µ–∫ –Ω–∞ python-–ø–æ–¥–æ–±–Ω—ã–π –ª–∏—Ç–µ—Ä–∞–ª
                json_data = ast.literal_eval(raw)

            if (
                isinstance(json_data, dict)
                and "file_path" in json_data
                and "content" in json_data
            ):
                filename = json_data["file_path"]
                content = json_data["content"]
                language = json_data.get(
                    "language", self.file_formatter.get_language_by_filename(filename)
                )

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                content = self.file_formatter.format_content(
                    content, language, filename
                )

                formatted_response = (
                    f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ `{filename}`:\n\n```{language}\n{content}\n```"
                )

                if self.debug_mode:
                    logger.debug(
                        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç-JSON –¥–ª—è —Ñ–∞–π–ª–∞ {filename}"
                    )

                return formatted_response

        except (ValueError, SyntaxError, KeyError) as e:
            if self.debug_mode:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {e}")

        return None

    def _extract_wrapped_text(self, response: str) -> Optional[str]:
        """–ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å c –∫–ª—é—á–æ–º 'text', –∏–∑–≤–ª–µ—á—å –∏ —Ä–∞–∑—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç."""
        try:
            text = response.strip()
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if not (text.startswith("{") and ("text" in text)):
                return None
            # –ü—ã—Ç–∞–µ–º—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å Python-–ø–æ–¥–æ–±–Ω—ã–π –ª–∏—Ç–µ—Ä–∞–ª
            data = ast.literal_eval(text)
            if (
                isinstance(data, dict)
                and "text" in data
                and isinstance(data["text"], str)
            ):
                extracted = data["text"]
                # –†–∞–∑—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º \n –∏ –∫–∞–≤—ã—á–∫–∏
                extracted = (
                    extracted.replace("\\n", "\n")
                    .replace('\\"', '"')
                    .replace("\\'", "'")
                )
                return extracted
        except Exception:
            return None
        return None

    def _format_list_directory_response(self, response: str) -> Optional[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã–π markdown-—Å–ø–∏—Å–æ–∫."""
        try:
            header = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
            # –ò—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ —Å –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
            content_part = response.split(header, 1)[-1]

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º regex –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ [FILE] –∏ [DIR]
            items = self._dir_item_re.findall(content_part)

            if not items:
                # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å '**', –ø–æ–¥–∞–≤–∏–º —à—É–º –∏ –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if "**" in content_part:
                    return header
                return response  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å

            output_lines = [header]
            for tag, _, name in items:
                emoji = "üìÑ" if tag == "[FILE]" else "üìÅ"
                output_lines.append(f"{emoji} {name}")

            return "\n".join(output_lines)
        except Exception as e:
            if self.debug_mode:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
            return response  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç

    def _handle_array_response(self, response: str) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞"""
        if self.debug_mode:
            logger.debug("–û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞")

        try:
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –º–∞—Å—Å–∏–≤
            parsed = ast.literal_eval(response)
            if isinstance(parsed, list) and len(parsed) >= 2:
                description = str(parsed[0])
                content = str(parsed[1])

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                filename_match = re.search(r"([^\s]+\.[a-zA-Z0-9]+)", description)
                if filename_match:
                    filename = filename_match.group(1)

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    if content.startswith("```") and content.endswith("```"):
                        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∂–µ –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ
                        lines = content.strip("`").split("\n")
                        if lines and lines[0]:  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —è–∑—ã–∫
                            language = lines[0]
                            actual_content = "\n".join(lines[1:])
                        else:
                            language = self.file_formatter.get_language_by_filename(
                                filename
                            )
                            actual_content = "\n".join(lines[1:])
                    else:
                        language = self.file_formatter.get_language_by_filename(
                            filename
                        )
                        actual_content = content

                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                    actual_content = self.file_formatter.format_content(
                        actual_content, language, filename
                    )

                    formatted_response = f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ `{filename}`:\n\n```{language}\n{actual_content}\n```"

                    if self.debug_mode:
                        logger.debug(
                            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç-–º–∞—Å—Å–∏–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {filename}"
                        )

                    return formatted_response

        except (ValueError, SyntaxError) as e:
            if self.debug_mode:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –º–∞—Å—Å–∏–≤: {e}")

        return None

    def _is_already_formatted(self, response: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç"""
        # –£—Å–ª–æ–≤–∏–µ –Ω–µ–º–Ω–æ–≥–æ –æ—Å–ª–∞–±–ª–µ–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —Å–ø–∏—Å–∫–∞
        return "```" in response and response.count("\n") > 2

    def _handle_pattern_matching(self, response: str) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ"""
        for i, pattern in enumerate(self._patterns):
            match = pattern.search(response)
            if match:
                if self.debug_mode:
                    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º {i}: {pattern}")

                first_part = match.group(1).strip()
                content = match.group(2).strip()

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
                filename = self._extract_filename(first_part, response)

                # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                content = self._clean_content(content)

                # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
                if len(content.strip()) < 3:
                    if self.debug_mode:
                        logger.debug(
                            "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç"
                        )
                    return None

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
                language = self.file_formatter.get_language_by_filename(filename)
                content = self.file_formatter.format_content(
                    content, language, filename
                )

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                formatted_response = (
                    f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ `{filename}`:\n\n```{language}\n{content}\n```"
                )

                if self.debug_mode:
                    logger.debug(f"–°–æ–∑–¥–∞–Ω –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ–∞–π–ª–∞ {filename}")

                return formatted_response

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if re.search(
            r"(—Ñ–∞–π–ª|file).*\\.(txt|py|js|json|md|yml|xml|csv)", response, re.IGNORECASE
        ):
            if self.debug_mode:
                logger.debug(
                    "–ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"
                )

        return None

    def _extract_filename(self, first_part: str, full_response: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
        filename_match = re.search(r"([^\s]+\.[a-zA-Z0-9]+)", first_part)
        if filename_match:
            return filename_match.group(1)

        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–º—è —Ñ–∞–π–ª–∞ –≤ –ø–æ–ª–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        filename_in_response = re.search(r"([^\s]+\.[a-zA-Z0-9]+)", full_response)
        return filename_in_response.group(1) if filename_in_response else "file.txt"

    def _clean_content(self, content: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç escape-—Å–∏–º–≤–æ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫"""
        content = content.replace("\\n", "\n").replace('\\"', '"').replace("\\'", "'")
        content = content.strip("\"'")
        return content

    def normalize_text(self, content: Any) -> str:
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç.
        - dict —Å –∫–ª—é—á–æ–º 'text' -> –±–µ—Ä—ë–º text
        - list -> –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑—É—è
        - —Å—Ç—Ä–æ–∫–∏ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ -> —Ä–∞–∑—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ
        """
        try:
            if isinstance(content, dict) and isinstance(content.get("text"), str):
                txt = content["text"]
            elif isinstance(content, list):
                parts = [self.normalize_text(x) for x in content]
                txt = "\n".join(parts)
            else:
                txt = str(content)
            return txt.replace("\\n", "\n").replace('\\"', '"').replace("\\'", "'")
        except Exception:
            return str(content)

    def format_error_message(self, error: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        return f"‚ùå {error}"

    def format_success_message(self, message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
        return f"‚úÖ {message}"

    def format_info_message(self, message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return f"‚ÑπÔ∏è {message}"

    def format_warning_message(self, message: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        return f"‚ö†Ô∏è {message}"
