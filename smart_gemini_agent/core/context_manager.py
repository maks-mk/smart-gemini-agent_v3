"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è Smart Gemini Agent
"""

import time
import logging
from typing import Dict, Any, List, Optional, TypedDict
from dataclasses import dataclass, field
from collections import deque
from enum import Enum

logger = logging.getLogger(__name__)


class ContextType(Enum):
    """–¢–∏–ø—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""

    USER_ACTION = "user_action"
    FILE_OPERATION = "file_operation"
    TOOL_USAGE = "tool_usage"
    ERROR_STATE = "error_state"
    SUCCESS_STATE = "success_state"


@dataclass
class ContextEntry:
    """–ó–∞–ø–∏—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""

    context_type: ContextType
    intent: str
    params: Dict[str, Any]
    timestamp: float = field(default_factory=time.time)
    success: bool = True
    error_message: Optional[str] = None
    tool_used: Optional[str] = None
    execution_time: float = 0.0
    priority: int = 1  # 1-5, –≥–¥–µ 5 - –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç


class Stats(TypedDict):
    total_entries: int
    success_rate: float
    avg_execution_time: float
    most_used_intents: Dict[str, int]
    error_patterns: Dict[str, int]
    tool_usage_stats: Dict[str, int]


class SmartContextManager:
    """–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""

    def __init__(self, max_entries: int = 50, debug_mode: bool = False):
        self.max_entries = max_entries
        self.debug_mode = debug_mode

        # –û—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (FIFO —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
        self._context_history: deque[ContextEntry] = deque(maxlen=max_entries)

        # –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º –æ–ø–µ—Ä–∞—Ü–∏—è–º –ø–æ —Ç–∏–ø—É
        self._last_by_type: Dict[ContextType, ContextEntry] = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self._stats: Stats = {
            "total_entries": 0,
            "success_rate": 0.0,
            "avg_execution_time": 0.0,
            "most_used_intents": {},
            "error_patterns": {},
            "tool_usage_stats": {},
        }

        # –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self._similarity_cache: Dict[str, List[ContextEntry]] = {}

        # –ù–û–í–û–ï: –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self._persistent_data: Dict[str, Any] = {
            "user_ids": {},  # –∏–º—è -> ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "chat_ids": {},  # –∏–º—è -> ID —á–∞—Ç–∞
            "file_paths": {},  # –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è -> –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
            "last_entities": {},  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø—É
            "preferences": {},  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        }

    def add_context(
        self,
        context_type: ContextType,
        intent: str,
        params: Dict[str, Any],
        success: bool = True,
        error_message: Optional[str] = None,
        tool_used: Optional[str] = None,
        execution_time: float = 0.0,
        priority: int = 1,
    ) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""

        entry = ContextEntry(
            context_type=context_type,
            intent=intent,
            params=params,
            success=success,
            error_message=error_message,
            tool_used=tool_used,
            execution_time=execution_time,
            priority=priority,
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        self._context_history.append(entry)

        # –û–±–Ω–æ–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø
        self._last_by_type[context_type] = entry

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_stats(entry)

        # –û—á–∏—â–∞–µ–º –∫—ç—à —Å—Ö–æ–∂–µ—Å—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self._similarity_cache.clear()

        if self.debug_mode:
            logger.debug(
                f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {intent} ({context_type.value}), "
                f"—É—Å–ø–µ—Ö: {success}, –≤—Ä–µ–º—è: {execution_time:.2f}—Å"
            )

    def get_last_context(
        self, context_type: Optional[ContextType] = None
    ) -> Optional[ContextEntry]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–ª–∏ –æ–±—â–µ–≥–æ"""
        if context_type:
            return self._last_by_type.get(context_type)

        return self._context_history[-1] if self._context_history else None

    def get_similar_operations(
        self, intent: str, params: Dict[str, Any], limit: int = 3
    ) -> List[ContextEntry]:
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
        cache_key = f"{intent}_{hash(str(sorted(params.items())))}"

        if cache_key in self._similarity_cache:
            return self._similarity_cache[cache_key][:limit]

        similar = []
        target_file = params.get("target")

        for entry in reversed(self._context_history):
            if entry.intent == intent:
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
                similarity_score = 3

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                if target_file and entry.params.get("target") == target_file:
                    similarity_score += 2  # –¢–æ—Ç –∂–µ —Ñ–∞–π–ª
                elif target_file and entry.params.get("target"):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if (
                        target_file.split(".")[-1]
                        == entry.params.get("target", "").split(".")[-1]
                    ):
                        similarity_score += 1

                # –£—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
                if entry.success:
                    similarity_score += 1

                similar.append((similarity_score, entry))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        similar.sort(key=lambda x: x[0], reverse=True)
        result = [entry for _, entry in similar[:limit]]

        self._similarity_cache[cache_key] = result
        return result

    def get_context_suggestions(
        self, current_intent: str, current_params: Dict[str, Any]
    ) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        suggestions = []

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        recent_errors = [
            entry
            for entry in list(self._context_history)[-10:]
            if not entry.success and entry.intent == current_intent
        ]

        if recent_errors:
            suggestions.append("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–∞–≤–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π")

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º
            error_types: Dict[str, int] = {}
            for error in recent_errors:
                error_msg = error.error_message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                error_types[error_msg] = error_types.get(error_msg, 0) + 1

            most_common_error = max(error_types.items(), key=lambda x: x[1])
            suggestions.append(f"–ß–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞: {most_common_error[0]}")

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        similar_ops = self.get_similar_operations(current_intent, current_params)
        successful_tools = [
            op.tool_used for op in similar_ops if op.success and op.tool_used
        ]

        if successful_tools:
            most_successful_tool = max(
                set(successful_tools), key=successful_tools.count
            )
            suggestions.append(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {most_successful_tool}")

        return suggestions

    def get_performance_insights(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self._context_history:
            return {"message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º
        intent_stats: Dict[str, Dict[str, Any]] = {}
        for entry in self._context_history:
            intent = entry.intent
            if intent not in intent_stats:
                intent_stats[intent] = {
                    "total": 0,
                    "successful": 0,
                    "avg_time": 0.0,
                    "times": [],
                }

            intent_stats[intent]["total"] += 1
            if entry.success:
                intent_stats[intent]["successful"] += 1
            intent_stats[intent]["times"].append(entry.execution_time)

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        for intent, stats in intent_stats.items():
            stats["success_rate"] = (stats["successful"] / stats["total"]) * 100
            stats["avg_time"] = sum(stats["times"]) / len(stats["times"])
            del stats["times"]  # –£–¥–∞–ª—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ

        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        problematic_intents = [
            intent
            for intent, stats in intent_stats.items()
            if stats["success_rate"] < 80 and stats["total"] >= 3
        ]

        return {
            "total_operations": len(self._context_history),
            "overall_success_rate": self._stats["success_rate"],
            "avg_execution_time": self._stats["avg_execution_time"],
            "intent_statistics": intent_stats,
            "problematic_intents": problematic_intents,
            "most_used_tools": self._stats["tool_usage_stats"],
        }

    def clear_context(self, keep_stats: bool = True) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self._context_history.clear()
        self._last_by_type.clear()
        self._similarity_cache.clear()

        if not keep_stats:
            self._stats = {
                "total_entries": 0,
                "success_rate": 0.0,
                "avg_execution_time": 0.0,
                "most_used_intents": {},
                "error_patterns": {},
                "tool_usage_stats": {},
            }

        logger.info(
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω" + (" (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞)" if keep_stats else "")
        )

    def export_context(self, format_type: str = "json") -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        if format_type == "json":
            import json

            data = {
                "context_history": [
                    {
                        "type": entry.context_type.value,
                        "intent": entry.intent,
                        "params": entry.params,
                        "timestamp": entry.timestamp,
                        "success": entry.success,
                        "error_message": entry.error_message,
                        "tool_used": entry.tool_used,
                        "execution_time": entry.execution_time,
                    }
                    for entry in self._context_history
                ],
                "statistics": self._stats,
            }
            return json.dumps(data, indent=2, ensure_ascii=False)

        elif format_type == "markdown":
            lines = ["# –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–≥–µ–Ω—Ç–∞\n"]
            lines.append(f"–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(self._context_history)}\n")
            lines.append(f"–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {self._stats['success_rate']:.1f}%\n")

            for entry in self._context_history:
                status = "‚úÖ" if entry.success else "‚ùå"
                lines.append(
                    f"- {status} **{entry.intent}** ({entry.context_type.value})"
                )
                if entry.params.get("target"):
                    lines.append(f"  - –¶–µ–ª—å: `{entry.params['target']}`")
                if entry.tool_used:
                    lines.append(f"  - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {entry.tool_used}")
                if not entry.success and entry.error_message:
                    lines.append(f"  - –û—à–∏–±–∫–∞: {entry.error_message}")
                lines.append("")

            return "\n".join(lines)

        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_type}")

    def _update_stats(self, entry: ContextEntry) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self._stats["total_entries"] += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞
        total = self._stats["total_entries"]
        current_successes = sum(1 for e in self._context_history if e.success)
        self._stats["success_rate"] = (current_successes / total) * 100

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        total_time = sum(e.execution_time for e in self._context_history)
        self._stats["avg_execution_time"] = total_time / total

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        intent = entry.intent
        self._stats["most_used_intents"][intent] = (
            self._stats["most_used_intents"].get(intent, 0) + 1
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        if entry.tool_used:
            tool = entry.tool_used
            self._stats["tool_usage_stats"][tool] = (
                self._stats["tool_usage_stats"].get(tool, 0) + 1
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫
        if not entry.success and entry.error_message:
            error = entry.error_message
            self._stats["error_patterns"][error] = (
                self._stats["error_patterns"].get(error, 0) + 1
            )

    # –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

    def store_user_id(self, name: str, user_id: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self._persistent_data["user_ids"][name.lower()] = user_id
        if self.debug_mode:
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name} -> {user_id}")

    def get_user_id(self, name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self._persistent_data["user_ids"].get(name.lower())

    def store_chat_id(self, name: str, chat_id: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —á–∞—Ç–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self._persistent_data["chat_ids"][name.lower()] = chat_id
        self._persistent_data["last_entities"]["chat"] = chat_id
        if self.debug_mode:
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω ID —á–∞—Ç–∞: {name} -> {chat_id}")

    def get_chat_id(self, name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ ID —á–∞—Ç–∞"""
        return self._persistent_data["chat_ids"].get(name.lower())

    def get_last_chat(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"""
        return self._persistent_data["last_entities"].get("chat")

    def store_file_path(self, short_name: str, full_path: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"""
        self._persistent_data["file_paths"][short_name.lower()] = full_path
        if self.debug_mode:
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: {short_name} -> {full_path}")

    def get_file_path(self, short_name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"""
        return self._persistent_data["file_paths"].get(short_name.lower())

    def extract_and_store_entities(self, tool_result: Any, tool_name: str) -> None:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        if not tool_result:
            return

        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
            if tool_name == "search_dialogs" and hasattr(tool_result, "dialogs"):
                for dialog in tool_result.dialogs:
                    if hasattr(dialog, "name") and hasattr(dialog, "id"):
                        self.store_user_id(dialog.name, str(dialog.id))
                    if hasattr(dialog, "username") and hasattr(dialog, "id"):
                        self.store_user_id(
                            dialog.username.replace("@", ""), str(dialog.id)
                        )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            elif tool_name == "send_message":
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç
                if hasattr(tool_result, "chat_id"):
                    self._persistent_data["last_entities"]["chat"] = str(
                        tool_result.chat_id
                    )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            elif "file" in tool_name.lower():
                if hasattr(tool_result, "path"):
                    import os

                    filename = os.path.basename(tool_result.path)
                    self.store_file_path(filename, tool_result.path)

        except Exception as e:
            if self.debug_mode:
                logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ {tool_name}: {e}")

    def get_context_for_intent(
        self, intent: str, params: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è"""
        context = {}

        # –î–ª—è Telegram –æ–ø–µ—Ä–∞—Ü–∏–π
        if "message" in intent or "telegram" in intent:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if self._persistent_data["user_ids"]:
                context["known_users"] = self._persistent_data["user_ids"]

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç
            last_chat = self.get_last_chat()
            if last_chat:
                context["last_chat"] = last_chat

        # –î–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        elif "file" in intent:
            if self._persistent_data["file_paths"]:
                context["known_files"] = self._persistent_data["file_paths"]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ö–æ–∂–∏–µ —É—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        similar_ops = self.get_similar_operations(intent, params, limit=2)
        if similar_ops:
            context["similar_successful_operations"] = [
                {
                    "params": op.params,
                    "tool_used": op.tool_used,
                    "execution_time": op.execution_time,
                }
                for op in similar_ops
                if op.success
            ]

        return context

    def get_persistent_data_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return {
            "stored_users": len(self._persistent_data["user_ids"]),
            "stored_chats": len(self._persistent_data["chat_ids"]),
            "stored_files": len(self._persistent_data["file_paths"]),
            "last_entities": self._persistent_data["last_entities"].copy(),
            "user_list": list(self._persistent_data["user_ids"].keys()),
            "chat_list": list(self._persistent_data["chat_ids"].keys()),
        }
