"""
–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫ –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±–æ–µ–≤
—Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
"""

import logging
import re
from typing import Dict, List, Any, Tuple, Optional, TypedDict, Pattern
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

# –ü—Ä–µ–¥–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
_TIME_PATTERN = re.compile(r"(\d+)\s*(second|sec|—Å–µ–∫—É–Ω–¥)", re.IGNORECASE)
_RETRY_DELAY_PATTERN = re.compile(r"retry_delay\s*{\s*seconds:\s*(\d+)")
_FILE_PATH_PATTERN = re.compile(r"['\"]([^'\"]+)['\"]")


class ErrorType(Enum):
    """–¢–∏–ø—ã –æ—à–∏–±–æ–∫ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""

    TOOL_ERROR = "tool_error"
    VALIDATION_ERROR = "validation_error"
    PERMISSION_ERROR = "permission_error"
    NOT_FOUND_ERROR = "not_found_error"
    NETWORK_ERROR = "network_error"
    RATE_LIMIT_ERROR = "rate_limit_error"
    SYNTAX_ERROR = "syntax_error"
    UNKNOWN_ERROR = "unknown_error"


@dataclass
class ErrorPattern:
    """–ü–∞—Ç—Ç–µ—Ä–Ω –æ—à–∏–±–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""

    pattern: str
    error_type: ErrorType
    recovery_strategy: str
    confidence: float = 1.0


@dataclass
class RecoveryAction:
    """–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏"""

    action_type: str
    description: str
    parameters: Dict[str, Any]
    priority: int = 1


class ErrorStats(TypedDict):
    total_errors: int
    recovered_errors: int
    error_types: Dict[str, int]
    recovery_success_rate: float


class ErrorRecoverySystem:
    """–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""

    def __init__(self, context_manager=None, debug_mode: bool = False):
        self.context_manager = context_manager
        self.debug_mode = debug_mode

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        self.error_patterns = self._initialize_error_patterns()
        
        # –ü—Ä–µ–¥–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._compiled_error_patterns: List[Tuple[Pattern, ErrorType, float]] = []
        self._compile_error_patterns()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        self.error_stats: ErrorStats = {
            "total_errors": 0,
            "recovered_errors": 0,
            "error_types": {},
            "recovery_success_rate": 0.0,
        }

        # –ö—ç—à —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        self.recovery_cache: Dict[str, List[RecoveryAction]] = {}

    def _compile_error_patterns(self) -> None:
        """–ü—Ä–µ–¥–∫–æ–º–ø–∏–ª—è—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è error –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        self._compiled_error_patterns = [
            (re.compile(ep.pattern, re.IGNORECASE), ep.error_type, ep.confidence)
            for ep in self.error_patterns
        ]
        logger.debug(f"–°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ {len(self._compiled_error_patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫")

    def _initialize_error_patterns(self) -> List[ErrorPattern]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫"""
        return [
            # –û—à–∏–±–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            ErrorPattern(
                pattern=r"(file not found|no such file|—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)",
                error_type=ErrorType.NOT_FOUND_ERROR,
                recovery_strategy="suggest_alternatives",
                confidence=0.9,
            ),
            ErrorPattern(
                pattern=r"(permission denied|access denied|–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω)",
                error_type=ErrorType.PERMISSION_ERROR,
                recovery_strategy="suggest_safe_alternative",
                confidence=0.95,
            ),
            ErrorPattern(
                pattern=r"(invalid path|–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å|illegal characters)",
                error_type=ErrorType.VALIDATION_ERROR,
                recovery_strategy="fix_path_format",
                confidence=0.9,
            ),
            # –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
            ErrorPattern(
                pattern=r"(connection error|network error|timeout|—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞)",
                error_type=ErrorType.NETWORK_ERROR,
                recovery_strategy="retry_with_backoff",
                confidence=0.8,
            ),
            ErrorPattern(
                pattern=r"(rate limit|too many requests|–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç)",
                error_type=ErrorType.RATE_LIMIT_ERROR,
                recovery_strategy="wait_and_retry",
                confidence=0.95,
            ),
            # –û—à–∏–±–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            ErrorPattern(
                pattern=r"(tool error|command failed|–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)",
                error_type=ErrorType.TOOL_ERROR,
                recovery_strategy="try_alternative_tool",
                confidence=0.85,
            ),
            ErrorPattern(
                pattern=r"(syntax error|invalid syntax|—Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)",
                error_type=ErrorType.SYNTAX_ERROR,
                recovery_strategy="fix_syntax",
                confidence=0.9,
            ),
        ]

    def analyze_error(
        self, error_message: str, context: Optional[Dict[str, Any]] = None
    ) -> Tuple[ErrorType, List[RecoveryAction]]:
        """
        –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

        Args:
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ç.–¥.)

        Returns:
            Tuple[—Ç–∏–ø_–æ—à–∏–±–∫–∏, —Å–ø–∏—Å–æ–∫_–¥–µ–π—Å—Ç–≤–∏–π_–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è]
        """
        self.error_stats["total_errors"] += 1

        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        error_type = self._classify_error(error_message)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.error_stats["error_types"][error_type.value] = (
            self.error_stats["error_types"].get(error_type.value, 0) + 1
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        recovery_actions = self._generate_recovery_actions(
            error_type, error_message, context
        )

        if self.debug_mode:
            logger.info(
                f"üîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏: —Ç–∏–ø={error_type.value}, "
                f"—Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è={len(recovery_actions)}"
            )

        return error_type, recovery_actions

    def _classify_error(self, error_message: str) -> ErrorType:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        error_lower = error_message.lower()

        best_error_type = ErrorType.UNKNOWN_ERROR
        best_confidence = 0.0

        for compiled_pattern, error_type, confidence in self._compiled_error_patterns:
            if compiled_pattern.search(error_lower):
                if confidence > best_confidence:
                    best_error_type = error_type
                    best_confidence = confidence

        return best_error_type

    def _generate_recovery_actions(
        self, error_type: ErrorType, error_message: str, context: Optional[Dict[str, Any]] = None
    ) -> List[RecoveryAction]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{error_type.value}_{hash(error_message)}"
        if cache_key in self.recovery_cache:
            return self.recovery_cache[cache_key]

        actions = []

        if error_type == ErrorType.NOT_FOUND_ERROR:
            actions.extend(self._handle_not_found_error(error_message, context))

        elif error_type == ErrorType.PERMISSION_ERROR:
            actions.extend(self._handle_permission_error(error_message, context))

        elif error_type == ErrorType.VALIDATION_ERROR:
            actions.extend(self._handle_validation_error(error_message, context))

        elif error_type == ErrorType.NETWORK_ERROR:
            actions.extend(self._handle_network_error(error_message, context))

        elif error_type == ErrorType.RATE_LIMIT_ERROR:
            actions.extend(self._handle_rate_limit_error(error_message, context))

        elif error_type == ErrorType.TOOL_ERROR:
            actions.extend(self._handle_tool_error(error_message, context))

        elif error_type == ErrorType.SYNTAX_ERROR:
            actions.extend(self._handle_syntax_error(error_message, context))

        else:
            actions.extend(self._handle_unknown_error(error_message, context))

        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.recovery_cache[cache_key] = actions

        return actions

    def _handle_not_found_error(
        self, error_message: str, context: Optional[Dict[str, Any]] = None
    ) -> List[RecoveryAction]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ '—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'"""
        actions = []

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –æ—à–∏–±–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω)
        file_match = _FILE_PATH_PATTERN.search(error_message)
        if file_match:
            missing_file = file_match.group(1)

            actions.append(
                RecoveryAction(
                    action_type="list_similar_files",
                    description=f"–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤, –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ '{missing_file}'",
                    parameters={"pattern": missing_file, "fuzzy": True},
                    priority=1,
                )
            )

            actions.append(
                RecoveryAction(
                    action_type="suggest_create_file",
                    description=f"–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª '{missing_file}'",
                    parameters={"filename": missing_file},
                    priority=2,
                )
            )

        actions.append(
            RecoveryAction(
                action_type="list_current_directory",
                description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
                parameters={},
                priority=3,
            )
        )

        return actions

    def _handle_permission_error(
        self, error_message: str, context: Optional[Dict[str, Any]] = None
    ) -> List[RecoveryAction]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–∞"""
        actions = []

        actions.append(
            RecoveryAction(
                action_type="use_safe_tool",
                description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
                parameters={"prefer_safe": True},
                priority=1,
            )
        )

        actions.append(
            RecoveryAction(
                action_type="check_permissions",
                description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
                parameters={},
                priority=2,
            )
        )

        return actions

    def _handle_validation_error(
        self, error_message: str, context: Optional[Dict[str, Any]] = None
    ) -> List[RecoveryAction]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        actions = []

        actions.append(
            RecoveryAction(
                action_type="fix_path_format",
                description="–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø—É—Ç–∏",
                parameters={"normalize": True, "escape_special": True},
                priority=1,
            )
        )

        actions.append(
            RecoveryAction(
                action_type="validate_input",
                description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                parameters={},
                priority=2,
            )
        )

        return actions

    def _handle_network_error(
        self, error_message: str, context: Optional[Dict[str, Any]] = None
    ) -> List[RecoveryAction]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫"""
        actions = []

        actions.append(
            RecoveryAction(
                action_type="retry_request",
                description="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π",
                parameters={"delay": 2, "max_retries": 3},
                priority=1,
            )
        )

        actions.append(
            RecoveryAction(
                action_type="use_alternative_endpoint",
                description="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫",
                parameters={},
                priority=2,
            )
        )

        return actions

    def _handle_rate_limit_error(
        self, error_message: str, context: Optional[Dict[str, Any]] = None
    ) -> List[RecoveryAction]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"""
        actions = []

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        wait_time = self._extract_wait_time(error_message)

        actions.append(
            RecoveryAction(
                action_type="wait_and_retry",
                description=f"–ü–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å",
                parameters={"wait_time": wait_time},
                priority=1,
            )
        )

        actions.append(
            RecoveryAction(
                action_type="use_alternative_service",
                description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å",
                parameters={},
                priority=2,
            )
        )

        return actions

    def _handle_tool_error(
        self, error_message: str, context: Optional[Dict[str, Any]] = None
    ) -> List[RecoveryAction]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        actions = []

        if context and context.get("intent"):
            intent = context["intent"]

            actions.append(
                RecoveryAction(
                    action_type="try_alternative_tool",
                    description=f"–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è '{intent}'",
                    parameters={"intent": intent, "exclude_failed": True},
                    priority=1,
                )
            )

        actions.append(
            RecoveryAction(
                action_type="check_tool_availability",
                description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
                parameters={},
                priority=2,
            )
        )

        return actions

    def _handle_syntax_error(
        self, error_message: str, context: Optional[Dict[str, Any]] = None
    ) -> List[RecoveryAction]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
        actions = []

        actions.append(
            RecoveryAction(
                action_type="fix_syntax",
                description="–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã",
                parameters={"auto_correct": True},
                priority=1,
            )
        )

        actions.append(
            RecoveryAction(
                action_type="suggest_correct_format",
                description="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                parameters={},
                priority=2,
            )
        )

        return actions

    def _handle_unknown_error(
        self, error_message: str, context: Optional[Dict[str, Any]] = None
    ) -> List[RecoveryAction]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        actions = []

        actions.append(
            RecoveryAction(
                action_type="generic_retry",
                description="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é",
                parameters={"delay": 1},
                priority=1,
            )
        )

        actions.append(
            RecoveryAction(
                action_type="log_for_analysis",
                description="–ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                parameters={"error_message": error_message},
                priority=3,
            )
        )

        return actions

    def _extract_wait_time(self, error_message: str) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
        time_match = _TIME_PATTERN.search(error_message)
        if time_match:
            return int(time_match.group(1))

        # –ò—â–µ–º retry_delay
        retry_match = _RETRY_DELAY_PATTERN.search(error_message)
        if retry_match:
            return int(retry_match.group(1))

        return 5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def record_recovery_attempt(
        self, error_type: ErrorType, action: RecoveryAction, success: bool
    ):
        """–ó–∞–ø–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        if success:
            self.error_stats["recovered_errors"] += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        total = self.error_stats["total_errors"]
        recovered = self.error_stats["recovered_errors"]
        self.error_stats["recovery_success_rate"] = (
            (recovered / total * 100) if total > 0 else 0
        )

        if self.debug_mode:
            status = "—É—Å–ø–µ—à–Ω–æ" if success else "–Ω–µ—É–¥–∞—á–Ω–æ"
            logger.info(
                f"üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {status}: {action.action_type} –¥–ª—è {error_type.value}"
            )

    def get_error_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        return {
            **self.error_stats,
            "most_common_errors": self._get_most_common_errors(),
            "recovery_patterns": self._analyze_recovery_patterns(),
        }

    def _get_most_common_errors(self) -> List[Tuple[str, int]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫"""
        error_counts = self.error_stats["error_types"]
        return sorted(error_counts.items(), key=lambda x: x[1], reverse=True)[:5]

    def _analyze_recovery_patterns(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        return {
            "total_patterns": len(self.error_patterns),
            "cache_size": len(self.recovery_cache),
            "avg_actions_per_error": (
                sum(len(actions) for actions in self.recovery_cache.values())
                / len(self.recovery_cache)
                if self.recovery_cache
                else 0
            ),
        }

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.recovery_cache.clear()
        logger.info("–ö—ç—à —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω")
