"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è Gemini
"""

import os
import json
import logging
from dataclasses import dataclass
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)


@dataclass
class AgentConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è Gemini —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ —Ñ–∞–π–ª–∞"""

    filesystem_path: Optional[str] = None  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None
    use_memory: bool = True
    model_name: str = "gemini-2.5-flash"
    model_provider: str = "gemini"  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –º–æ–¥–µ–ª–∏
    temperature: float = 0.0
    debug_mode: bool = False
    prompt_file: str = "prompt.md"
    mcp_config_file: str = "mcp.json"
    max_context_files: int = 20

    @classmethod
    def from_file(cls, config_file: str = "config.json") -> "AgentConfig":
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(config_file):
                with open(config_file, "r", encoding="utf-8") as f:
                    config_data = json.load(f)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞
                agent_config = config_data.get("agent", {})
                files_config = config_data.get("files", {})
                logging_config = config_data.get("logging", {})

                return cls(
                    model_name=agent_config.get("model_name", "gemini-2.5-flash"),
                    model_provider=agent_config.get(
                        "model_provider", "gemini"
                    ),  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                    temperature=agent_config.get("temperature", 0.0),
                    use_memory=agent_config.get("use_memory", True),
                    max_context_files=agent_config.get("max_context_files", 20),
                    debug_mode=bool(
                        logging_config.get("debug_mode", logging_config.get("debug", False))
                    ),
                    prompt_file=files_config.get("prompt_file", "prompt.md"),
                    mcp_config_file=files_config.get("mcp_config_file", "mcp.json"),
                )
            else:
                logger.info(
                    f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                )
                return cls()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {config_file}: {e}")
            return cls()

    def __post_init__(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if self.filesystem_path is None:
            self.filesystem_path = os.getcwd()
            logger.info(
                f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∞—è: {self.filesystem_path}"
            )

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–ª–µ—à–∞)
        if not self.filesystem_path.endswith(os.sep):
            self.filesystem_path += os.sep

    def validate(self) -> None:
        """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è"""
        if not self.filesystem_path or not os.path.exists(self.filesystem_path):
            raise ValueError(f"–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.filesystem_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if self.model_provider == "gemini" and not os.getenv("GOOGLE_API_KEY"):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: GOOGLE_API_KEY")
        elif self.model_provider == "openrouter" and not os.getenv(
            "OPENROUTER_API_KEY"
        ):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: OPENROUTER_API_KEY")

    def get_mcp_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        mcp_config_path = self.mcp_config_file

        try:
            if not os.path.exists(mcp_config_path):
                logger.warning(
                    f"–§–∞–π–ª {mcp_config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                )
                return self._get_default_mcp_config()

            with open(mcp_config_path, "r", encoding="utf-8") as f:
                config = json.load(f)

            # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤–æ –≤—Å–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è JSON (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ —Å–ª–µ—à–∏)
            if self.filesystem_path:
                normalized_path = self.filesystem_path.replace("\\", "/")
            else:
                normalized_path = os.getcwd().replace("\\", "/")
            config_str = json.dumps(config)
            config_str = config_str.replace("{filesystem_path}", normalized_path)
            config = json.loads(config_str)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
            enabled_config = self._filter_enabled_servers(config)

            all_servers = list(config.keys())
            enabled_servers = list(enabled_config.keys())
            disabled_servers = [s for s in all_servers if s not in enabled_servers]

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP –∏–∑ {mcp_config_path}")
            logger.info(f"üìä –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(all_servers)}")
            logger.info(f"‚úÖ –í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: {enabled_servers}")
            if disabled_servers:
                logger.info(f"‚ùå –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: {disabled_servers}")

            return enabled_config

        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {mcp_config_path}: {e}")
            logger.error(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –ø—É—Ç—å: {self.filesystem_path}")
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return self._get_default_mcp_config()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {mcp_config_path}: {e}")
            return self._get_default_mcp_config()

    def _filter_enabled_servers(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã"""
        enabled_config = {}

        for server_name, server_config in config.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä enabled (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
            is_enabled = server_config.get("enabled", True)

            if is_enabled:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ enabled –¥–ª—è MCP –∫–ª–∏–µ–Ω—Ç–∞
                clean_config = {
                    k: v for k, v in server_config.items() if k != "enabled"
                }
                enabled_config[server_name] = clean_config
            else:
                logger.debug(f"–°–µ—Ä–≤–µ—Ä {server_name} –æ—Ç–∫–ª—é—á–µ–Ω (enabled: false)")

        return enabled_config

    def _get_default_mcp_config(self) -> Dict[str, Any]:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "filesystem": {
                "command": "npx",
                "args": [
                    "-y",
                    "@modelcontextprotocol/server-filesystem",
                    self.filesystem_path,
                ],
                "transport": "stdio",
                "enabled": True,
            },
            "duckduckgo": {
                "command": "uvx",
                "args": ["duckduckgo-mcp-server"],
                "transport": "stdio",
                "enabled": True,
            },
            "fetch": {
                "command": "uvx",
                "args": ["mcp-server-fetch"],
                "transport": "stdio",
                "enabled": True,
            },
        }
